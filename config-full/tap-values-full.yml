#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")

---
#@ def config():
profile: #@ data.values.profile
ceip_policy_disclosed: true
accelerator:
    ingress:
        include: true
    domain: #@ data.values.tap.domains.main
    server:
        service_type: ClusterIP
buildservice:
  kp_default_repository: #@ "{}/{}".format(data.values.tap.registry.host, data.values.tap.registry.repositories.buildService)
  kp_default_repository_username: #@ data.values.tap.credentials.registry.username
  kp_default_repository_password: #@ data.values.tap.credentials.registry.password
  tanzunet_username: #@ data.values.tap.credentials.tanzuNet.username
  tanzunet_password: #@ data.values.tap.credentials.tanzuNet.password
  enable_automatic_dependency_updates: false
#@ if data.values.profile == "view":
shared:
  ingress_domain: #@ data.values.tap.domains.main
#@ end
supply_chain: #@ data.values.tap.supply_chain
ootb_supply_chain_basic:
  registry:
    server: #@ data.values.tap.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  gitops:
    ssh_secret: ""

ootb_supply_chain_testing:
  registry:
    server: #@ data.values.tap.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  gitops:
    ssh_secret: ""

ootb_supply_chain_testing_scanning:
  registry:
    server: #@ data.values.tap.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  gitops:
    ssh_secret: ""

learningcenter:
  ingressDomain: #@ data.values.tap.domains.learningCenter
metadata_store:
  ns_for_export_app_cert: "*"
  ingress_domain: #@ data.values.tap.domains.main
  app_service_type: ClusterIP
  ingress_enabled: "true"
grype:
  namespace: #@ data.values.tap.devNamespace
  targetImagePullSecret: "tap-registry"
  #@ if data.values.profile == "build":
  metadataStore:
    url: #@ data.values.grype.metadataStore.url
    caSecret:
      name: store-ca-cert
      importFromNamespace: metadata-store-secrets
    authSecret:
      name: store-auth-token
      importFromNamespace: metadata-store-secrets
  #@ end
#@ if data.values.profile == "build":
scanning:
  metadataStore:
    url: ""
#@ end
tap_gui:
  service_type: ClusterIP
  ingressEnabled: "true"
  ingressDomain: #@ data.values.tap.domains.main
  app_config:
    app:
      baseUrl: #@ "http://{}".format(data.values.tap.domains.tapGui)
    integrations:
      #@ if "github" in data.values.tap.credentials and "token" in data.values.tap.credentials.github:
      github:
      - host: github.com
        token: #@ data.values.tap.credentials.github.token
      #@ end
    catalog:
      locations:
      #@ for catalog in data.values.tap.catalogs:
      - type: url
        target: #@ catalog
      #@ end
    proxy:
      /metadata-store:
        target: #@ data.values.tap.metadata_store.target
        changeOrigin: true
        secure: false
        headers:
          Authorization: #@ "Bearer {}".format(data.values.tap.metadata_store.auth_token)
          X-Custom-Source: project-star
    techdocs:
      builder: 'external'
      publisher:
        type: 'awsS3'
        awsS3:
          bucketName: #@ data.values.tap.techdocs.airgapped.bucketName
          credentials:
            accessKeyId: #@ data.values.tap.techdocs.airgapped.accessKeyId
            secretAccessKey: #@ data.values.tap.techdocs.airgapped.secretAccessKey
          region: minio
          endpoint: #@ data.values.tap.techdocs.airgapped.endpoint
          s3ForcePathStyle: true
    backend:
      baseUrl: #@ "http://{}".format(data.values.tap.domains.tapGui)
      cors:
        origin: #@ "http://{}".format(data.values.tap.domains.tapGui)
      reading:
        allow:
        - host: #@ "*.{}".format(data.values.tap.domains.knative)
      #@ if "backstage" in data.values.tap.credentials and "database" in data.values.tap.credentials.backstage:
      backend:
        database:
          client: #@ data.values.tap.credentials.backstage.database.client
          connection:
            host: #@ data.values.tap.credentials.backstage.database.host
            port: #@ data.values.tap.credentials.backstage.database.port
            user: #@ data.values.tap.credentials.backstage.database.username
            password: #@ data.values.tap.credentials.backstage.database.password
            ssl: {rejectUnauthorized: true}
      #@ end
    #@ if "github" in data.values.tap.credentials and "clientId" in data.values.tap.credentials.github and "clientSecret" in data.values.tap.credentials.github:
    auth:
      environment: development
      providers:
        github:
          development:
            clientId: #@ data.values.tap.credentials.github.clientId
            clientSecret: #@ data.values.tap.credentials.github.clientSecret
    #@ end
    #@ if data.values.profile == "view":
    kubernetes:
      serviceLocatorMethod:
        type: 'multiTenant'
      clusterLocatorMethods:
        - type: 'config'
          clusters:
            - url: #@ data.values.tap.multiCluster.run.url
              name: #@ data.values.tap.multiCluster.run.name
              authProvider: serviceAccount
              serviceAccountToken: #@ data.values.tap.multiCluster.run.serviceAccountToken
              skipTLSVerify: #@ data.values.tap.multiCluster.run.skipTLSVerify
            - url: #@ data.values.tap.multiCluster.build.url
              name: #@ data.values.tap.multiCluster.build.name
              authProvider: serviceAccount
              serviceAccountToken: #@ data.values.tap.multiCluster.build.serviceAccountToken
              skipTLSVerify: #@ data.values.tap.multiCluster.build.skipTLSVerify
            - url: #@ data.values.tap.multiCluster.iterate.url
              name: #@ data.values.tap.multiCluster.iterate.name
              authProvider: serviceAccount
              serviceAccountToken: #@ data.values.tap.multiCluster.iterate.serviceAccountToken
              skipTLSVerify: #@ data.values.tap.multiCluster.iterate.skipTLSVerify
    #@ end
contour:
  envoy:
    service:
      type: LoadBalancer
#@ if data.values.profile == "run":
appliveview_connector:
  backend:
    sslDisabled: #@ data.values.appliveveiew.sslDisabled
    host: #@ "appliveview.{}".format(data.values.tap.domains.main)
#@ end
cnrs:
  domain_name: #@ data.values.tap.domains.knative
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: tap-values
  namespace: #@ data.values.tap.namespace
type: Opaque
stringData:
  values.yml: #@ yaml.encode(config())
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: tap
  namespace: #@ data.values.tap.namespace
  annotations:
    kapp.k14s.io/change-group: tap
    kapp.k14s.io/change-rule: "upsert after upserting tap-install/rbac"
    kapp.k14s.io/change-rule.repo: "upsert after upserting tap-install/tap-repo"
spec:
  packageRef:
    refName: tap.tanzu.vmware.com
    versionSelection:
      constraints: #@ str(data.values.tap.version)
      prereleases: {}
  serviceAccountName: tap-default-sa
  values:
  - secretRef:
      name: tap-values
