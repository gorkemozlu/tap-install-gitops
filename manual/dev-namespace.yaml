apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: developer-defined-tekton-pipeline
  namespace: dev-tap
  labels:
    apps.tanzu.vmware.com/pipeline: test
spec:
  params:
    - name: source-url
    - name: source-revision
  tasks:
    - name: test
      params:
        - name: source-url
          value: $(params.source-url)
        - name: source-revision
          value: $(params.source-revision)
      taskSpec:
        params:
          - name: source-url
          - name: source-revision
        steps:
          - name: test
            image: gradle
            script: |-
              cd `mktemp -d`
              wget -qO- $(params.source-url) | tar xvz
---
apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
kind: ScanPolicy
metadata:
  name: scan-policy
  namespace: dev-tap
spec:
  regoFile: |
    package main
    # Accepted Values: "Critical", "High", "Medium", "Low", "Negligible", "UnknownSeverity"
    notAllowedSeverities := ["Critical","High","UnknownSeverity"]
    ignoreCves := []
    contains(array, elem) = true {
      array[_] = elem
    } else = false { true }
    isSafe(match) {
      fails := contains(notAllowedSeverities, match.ratings.rating[_])
      not fails
    }
    isSafe(match) {
      ignore := contains(ignoreCves, match.Id)
      ignore
    }
    deny[msg] {
      comp := input.bom.components.component[_]
      vuln := comp.vulnerabilities.vulnerability[_]
      ratings := vuln.ratings.rating[_]
      not isSafe(vuln)
      msg = sprintf("CVE %s %s %s", [comp.name, vuln.id, ratings])
    }